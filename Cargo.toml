[workspace]
resolver = "2"


members = [
    "flv_cli/data_importer",
    "flv_qd_client",
    "flv_qd_client_examples/basic_data_stream",
    "flv_common",
    "flv_components/client_manager",
    "flv_components/config_manager",
    "flv_components/db_query_manager",
    "flv_components/db_quest_manager",
    "flv_components/symbol_manager",
    "flv_sbe/bindings",
    "flv_sbe/sbe_messages",
    "flv_service_utils",
    "flv_services/qdgw",
    "flv_specs/db_specs",
    "flv_specs/exchange_specs",
    "flv_specs/service_specs",
]


[workspace.package]
edition = "2021"
rust-version = "1.75"
readme = "README.md"
repository = "https://github.com/marvin-hansen/quant-engine"
authors = ["Marvin Hansen <marvin.hansen@gmail.com>"]

# Building a Monorepo with Rust
# https://earthly.dev/blog/rust-monorepo/
[workspace.dependencies]
#
# Internal crates
common = {path = "flv_common" }
client_manager = {path = "flv_components/client_manager" }
config_manager = {path = "flv_components/config_manager" }
db_query_manager = { path = "flv_components/db_query_manager" }
db_quest_manager = {path = "flv_components/db_quest_manager" }
symbol_manager = {path = "flv_components/symbol_manager" }
qd_client = { path = "flv_qd_client" }
sbe_bindings = {path = "flv_sbe/bindings" }
sbe_messages = {path = "flv_sbe/sbe_messages" }
service_utils = { path = "flv_service_utils" }
db_specs = { path = "flv_specs/db_specs" }
exchange_specs = { path = "flv_specs/exchange_specs" }
service_specs = {path = "flv_specs/service_specs" }
#
# External crates
autometrics = { version = "1", features = ["prometheus-exporter"] }
chrono = { version = "0.4", features = ["serde"] }
config-file = "0.2"
csv = "1.3"
encoding_rs = "0.8"
fluvio = { version = "0.21", default-features = false, features = ["rustls"] }
futures = "0.3"
lru = "0.12.1"
# https://stackoverflow.com/questions/72594101/how-to-parse-a-postgresql-numeric-type-to-rust-native-ones-upon-request
rust_decimal = { version = "1.33", features = ["db-postgres"] }
serde = { version = "1", features = ["derive"] }
tokio = { version = "1", features = ["macros", "net", "rt-multi-thread", "signal"] }
# Quest DB uses the postgres wire protocol for queries, which requires the postgres crate
questdb-rs = { version = "3.1" }
tokio-postgres = { version = "0.7", features = [ "with-chrono-0_4"] }
warp = { version = "0.3", features = ["multipart"] }


# Optimize all crates
[profile.release]
opt-level = 3
strip = true  # Automatically strip debug symbols from the binary
lto = true    # Enable Link Time Optimization (LTO)
codegen-units = 1 # Reduce Parallel Code Generation Units to Increase Optimization


# There's a Cargo feature named profile-overrides
# that lets you override the optimization level of dependencies.
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html
[profile.release.package."*"]
opt-level = 3
strip = true  # Automatically strip debug symbols from the binary to reduce size
codegen-units = 1 # Reduce Parallel Code Generation Units to Increase Optimization
